// Generated by CoffeeScript 1.7.1
(function() {
  var body, circle_fill, circle_offsetY, circle_spacing, cx_left, cx_right, cy, desc_margin, desc_x, desc_y, first_desc, force_g, force_g_offsetX, force_g_offsetY, label_container, label_margin, label_y, max_size, min_size, pack_g, pack_g_offsetX, pack_g_offsetY, rotate, si_format, stroke_fill, svg, wrap;

  min_size = 1;

  max_size = 300;

  circle_spacing = 50;

  circle_offsetY = 0;

  label_margin = 40;

  desc_margin = 20;

  cx_left = window.innerWidth / 2 - max_size - circle_spacing;

  cy = window.innerHeight / 2 - max_size - circle_offsetY;

  cx_right = window.innerWidth / 2 + max_size + circle_spacing;

  label_y = cy + max_size + label_margin;

  desc_x = window.innerWidth / 2;

  desc_y = label_y + desc_margin;

  si_format = d3.format(".3s");

  circle_fill = "#f4f4f4";

  stroke_fill = "#DDDBDB";

  first_desc = "If you are a <strong>registered voter</strong> under universal suffarage, you have the <strong>same</strong> voting power than anyone else";

  body = d3.select("body");

  svg = d3.select("svg");

  force_g_offsetX = 100;

  force_g_offsetY = 200;

  pack_g_offsetX = 450;

  pack_g_offsetY = 200;

  force_g = svg.append("g").attr("transform", "translate(" + force_g_offsetX + ", " + force_g_offsetY + ")");

  pack_g = svg.append("g").attr("transform", "translate(" + pack_g_offsetX + ", " + pack_g_offsetY + ")");

  label_container = d3.select(".container").append("div").attr("class", "label-container");

  d3.json("data.json", function(err, data) {
    var force, force_data, force_node, pack, pack_data, pack_label, pack_node, pack_root, pop_scale, power_scale, stage_style, update, vote_power, vote_power_scaled;
    pop_scale = d3.scale.sqrt().domain([0, data.registered_voter]).range([min_size, max_size]);
    power_scale = d3.scale.linear().domain([0, max_size]).range([max_size, min_size]);
    vote_power_scaled = function(d, total) {
      return power_scale(vote_power(d, total));
    };
    vote_power = function(d, total) {
      if (total == null) {
        total = data.registered_voter;
      }
      return d3.format(".0f")(total / d);
    };
    pack_root = {
      id: "all",
      name: "Registered Voter",
      value: data.registered_voter,
      label: {
        stage1: {
          size: "big"
        }
      },
      children: [
        {
          id: "non-voters",
          name: "Non-voters",
          value: data.registered_voter - data.election_comittee.voter
        }, {
          id: "ec-voters",
          name: "Voters for Election Comittee",
          value: data.election_comittee.voter,
          children: []
        }
      ]
    };
    pack_root.children[1].children = data.election_comittee.sectors.map(function(sector) {
      return {
        id: sector.id,
        name: sector.name,
        value: sector.count,
        children: [
          {
            id: "" + sector.id + "-cm",
            name: "Voted-in Election Comittee Members from " + sector.name,
            value: data.election_comittee.seats_per_sector
          }, {
            id: "" + sector.id + "-non-cm",
            name: "Election Comittee Non-members from " + sector.name,
            value: sector.count - data.election_comittee.seats_per_sector,
            hidden: true
          }
        ]
      };
    });
    stage_style = {
      "stage1": [
        {
          id: "all",
          size: "big",
          fill: true,
          label_position: "fit"
        }
      ],
      "stage2": [
        {
          id: "all",
          size: "big",
          fill: false,
          label_position: "fit"
        }, {
          id: "non-voters",
          size: "big",
          fill: false,
          label_position: "fit"
        }, {
          id: "ec-voters",
          size: "big",
          fill: true,
          label_position: "fit"
        }
      ],
      "stage3": [
        {
          id: "non-voters",
          size: "big",
          fill: false
        }, {
          id: "ec-voters",
          size: "big",
          fill: true,
          label_position: "fit"
        }, {
          id: "sector-ftit",
          size: "small",
          label_position: {
            x: 100,
            y: 100
          },
          fill: true
        }, {
          id: "sector-ehil",
          size: "small",
          label_position: {
            x: 100,
            y: 100
          },
          fill: true
        }, {
          id: "sector-lrw",
          size: "small",
          label_position: {
            x: 100,
            y: 100
          },
          fill: true
        }, {
          id: "sector-hkcpb",
          size: "small",
          label_position: {
            x: 100,
            y: 100
          },
          fill: true
        }
      ],
      "stage4": [
        {
          id: "sector-ftit-cm",
          size: "small",
          label_position: {
            x: 100,
            y: 100
          },
          pointer: false
        }
      ]
    };
    pack_g.datum(pack_root);
    pack = d3.layout.pack().size([max_size, max_size]);
    pack_data = pack.nodes(pack_root).filter(function(d) {
      return !d.hidden;
    });
    pack_node = pack_g.selectAll(".pack.node").data(pack_data).enter().append("g").attr("transform", function(d) {
      var cpoint, pt;
      cpoint = {
        x: max_size / 2,
        y: max_size / 2
      };
      pt = rotate(d, cpoint, -Math.PI / 2);
      d.pack_x = pt.x;
      d.pack_y = pt.y;
      return "translate(" + d.pack_x + ", " + d.pack_y + ")";
    }).attr("class", function(d) {
      return "pack node " + d.id;
    });
    pack_node.append("circle").attr("r", function(d) {
      return d.r;
    });
    pack_label = label_container.selectAll(".pack.label").data(pack_data).enter().append("div").attr("class", function(d) {
      return "pack label " + d.id;
    }).attr("id", function(d) {
      return "label-" + d.id;
    }).style("top", function(d) {
      return pack_g_offsetY + d.pack_y - d.r;
    }).style("left", function(d) {
      return pack_g_offsetX + d.pack_x - d.r;
    }).style("width", function(d) {
      return d.r * 2;
    }).style("height", function(d) {
      return d.r * 2;
    });
    pack_label.append("p").html(function(d) {
      return "<strong>" + d.name + "</strong> " + (vote_power(d.value)) + "x";
    });
    force_data = [];
    force_node = force_g.selectAll(".force.node").data(force_data);
    force = d3.layout.force().links([]).size([max_size, max_size]).charge(function(d) {
      return -20 * power_scale(d.r);
    });
    force.on("tick", function(e) {
      return force_node.attr("transform", function(d) {
        return "translate(" + d.x + ", " + d.y + ")";
      });
    });
    update = function(stage) {
      var styles;
      styles = stage_style[stage];
      body.attr("class", stage);
      return styles.forEach(function(style) {
        pack_node.filter(function(d) {
          return d.id === style.id;
        }).style("opacity", 1);
        pack_label.filter(function(d) {
          return d.id === style.id;
        }).style("opacity", 1);
        force_data = pack_data.filter(function(d) {
          return d.id === style.id;
        });
        force_node = force_g.selectAll(".force.node").data(force_data);
        force_node.exit().remove();
        force_node.enter().append("g").attr("transform", function(d) {
          return "translate(" + d.x + ", " + d.y + ")";
        }).attr("id", function(d) {
          return "power-" + d.id;
        }).append("circle").attr("r", function(d) {
          return power_scale(d.r);
        });
        return force.start();
      });
    };
    return update("stage2");
  });

  rotate = function(point, cpoint, angle) {
    var c, s, x, y;
    s = Math.sin(angle);
    c = Math.cos(angle);
    x = point.x - cpoint.x;
    y = point.y - cpoint.y;
    return {
      x: cpoint.x + x * c - y * s,
      y: cpoint.y + x * s + y * c
    };
  };

  wrap = function(text, width) {
    return text.each(function() {
      var dy, line, lineHeight, lineNumber, tspan, word, words, x, y, _results;
      text = d3.select(this);
      words = text.text().split(/\s+/).reverse();
      word;
      line = [];
      lineNumber = 0;
      lineHeight = 1.1;
      x = text.attr("x") || 0;
      y = text.attr("y") || 0;
      dy = parseFloat(text.attr("dy")) || 0;
      tspan = text.text(null).append("tspan").attr("x", x).attr("y", y).attr("dy", dy + "em");
      _results = [];
      while ((word = words.pop())) {
        line.push(word);
        tspan.text(line.join(" "));
        if (tspan.node().getComputedTextLength() > width) {
          line.pop();
          tspan.text(line.join(" "));
          line = [word];
          _results.push(tspan = text.append("tspan").attr("x", x).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  };

}).call(this);
